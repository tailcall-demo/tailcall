name: Build

on:
  push:
    branches:
      - "**"
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
jobs:
  check_if_build:
    name: Check if Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1000
      - id: check
        run: |
          chmod +x .github/scripts/check_if_build.sh
          .github/scripts/check_if_build.sh
    outputs:
      check_if_build: ${{ steps.check.outputs.check_if_build }}

  test:
    name: Run Tests
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true

      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: llvm-cov
          args: --all-features --lcov --output-path lcov.info

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
          fail_ci_if_error: true

  format:
    name: Run Formatter and Lint Check
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install Prettier
        run: npm install --global prettier
      - name: Install Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/checkout@v4
      - name: Run lint script
        run: ./lint.sh --mode=check

  deploy:
    name: Deploy App
    runs-on: ubuntu-latest
    needs: [test, format, check_if_build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.check_if_build.outputs.check_if_build == 'true')
    concurrency:
      group: deploy-job
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  draft_release:
    name: Draft Release
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Current Branch (Fast)
        uses: actions/checkout@v4

      - id: create_release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml

      - name: Set Output for Later Jobs
        id: set_output
        run: |
          echo "create_release_name=${{ steps.create_release.outputs.name }}" >> $GITHUB_OUTPUT
          echo "create_release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
    outputs:
      create_release_name: ${{ steps.set_output.outputs.create_release_name }}
      create_release_id: ${{ steps.set_output.outputs.create_release_id }}

  release:
    name: Release
    needs: [test, format, draft_release, check_if_build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.check_if_build.outputs.check_if_build == 'true')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          [
            linux-x86_64-gnu,
            linux-x86_64-musl,
            linux-aarch64-gnu,
            linux-aarch64-musl,
            linux-i686-gnu,
            apple-arm64,
            apple-x86_64,
          ]
        include:
          - build: linux-x86_64-gnu
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false

          - build: linux-x86_64-musl
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            cross: true

          - build: linux-aarch64-gnu
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: true

          - build: linux-aarch64-musl
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            cross: true

          - build: linux-i686-gnu
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            cross: true

          - build: apple-arm64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

          - build: apple-x86_64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{secrets.GITHUBTOKEN}}

    steps:
      - name: Checkout Current Branch (Fast)
        uses: actions/checkout@v4

      - name: Install Correct Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Build
        env:
          APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Rename Binary with Target Name
        run: mv target/${{ matrix.target }}/release/tailcall target/${{ matrix.target }}/release/tailcall-${{ matrix.target }}

      - name: Upload ${{ matrix.target }} Binary
        uses: xresloader/upload-to-github-release@v1
        with:
          release_id: ${{ needs.draft_release.outputs.create_release_id }}
          file: target/${{ matrix.target }}/release/tailcall-${{ matrix.target }}
          overwrite: true
